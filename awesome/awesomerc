-- Standard awesome library
require("awful")
require("awful.autofocus")
require("awful.rules")
-- Theme handling library
require("beautiful")
-- Notification library
require("naughty")
--require("vicious")
-- Load Debian menu entries
require("debian.menu")
-- Custom libraries
--require("revelation")
require("shifty")
require("wicked")
--require("teardrop")

--if true then return end
-- {{{ Variable definitions
-- Themes define colours, icons, and wallpapers
beautiful.init("/home/scyn/.config/awesome/themes/scyn/theme.lua")

-- This is used later as the default terminal and editor to run.
terminal = "urxvt"
app_launcher = "gmrun"
editor = os.getenv("EDITOR") or "editor"
editor_cmd = terminal .. " -e " .. editor

-- Default modkey.
-- Usually, Mod4 is the key with a logo between Control and Alt.
-- If you do not like this or do not have such a key,
-- I suggest you to remap Mod4 to another key using xmodmap or other tools.
-- However, you can use another modifier like Mod1, but it may interact with others.
modkey = "Mod4"

-- Table of layouts to cover with awful.layout.inc, order matters.
layouts =
{
    awful.layout.suit.tile,
   -- awful.layout.suit.tile.left,
  --  awful.layout.suit.tile.bottom,
  --  awful.layout.suit.tile.top,
    awful.layout.suit.fair,
  --  awful.layout.suit.fair.horizontal,
  --  awful.layout.suit.spiral,
--    awful.layout.suit.spiral.dwindle,
    awful.layout.suit.max,
    awful.layout.suit.max.fullscreen,
    awful.layout.suit.magnifier,
    awful.layout.suit.floating
}
-- }}}


-- {{{ Tags

shifty.config.tags = {
    ["[1. www]"] = { position = 1, exclusive = true, spawn = browser},
    ["[2. code]"] = { position = 2, exclusive=true, nopopup=true, spawn="gvim --servername 1"},
    ["[3. vz]"] = { position = 3, init = true, },
    ["[4. local]"] = { position = 4, init = true, },
    ["[5. com]"] = { position = 5, exclusive=true, nopopup=true},
    ["[6. mail]"] = { position = 6, exclusive=true, nopopup=true},
    ["[misc]"] = { position = 10, init = true, }
--    ["[urxvt]"] = { position = 1, init = true, },
--    ["[www]"]  = { position = 2,  spawn = browser,},
--    ["[gimp]"] = { position = 6, exclusive = true, nopopup = true, spawn = gimp, },
--    ["[irc]"]  = { position = 3,  nopopup = true, spawn = "rxvt-unicode -T weechat -e weechat-curses"  },
--    ["[sys]"]  = { position = 5, exclusive = true,  nopopup = true, },
--    ["[msg]"]  = { position = 7, exclusive = true,  nopopup = true,  },
--    ["[view]"] = { position = 8, exclusive = true, nopopup = true,  },
--    ["[vbox]"] = { position = 9, exclusive = true, nopopup = true,  },
--    ["[mail]"] = { position = 10, exclusive = true, nopopup = true,  },
--    ["[med]"] = { position = 11, nopopup = true,                      },
--   -- ["[mplayer]"] = { position = 11, nopopup = true, spawn = "rxvt-unicode -T mplay"},
--    ["[dl]"] = { position = 12, nopopup = true, spawn = "Transmission"},
}

shifty.taglist = mytaglist 
-- Clients rules

shifty.config.apps = {

         { match = {"Firefox","Iceweasel","Vimperator","Shiretoko"} , tag = "[1. www]", opacity = 0.95       } ,
         { match = {"Evolution"} , tag = "[6. mail]", opacity = 0.95       } ,
         { match = {"Pidgin"                         }, tag = "[5. com]", float = true                      },
	 { match = {"Gvim", "gvim"}, tag = "[2. code]", opacity = 0.85},
         { match = { "" },
                   buttons = awful.util.table.join(
                       awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
                    awful.button({ modkey }, 1, awful.mouse.client.move),
                     awful.button({ modkey }, 3, awful.mouse.client.resize),
              awful.button({ modkey }, 8, awful.mouse.client.resize))
  }
}

-- Options par d√©faut.
shifty.config.defaults = {
  layout = awful.layout.suit.tile,
  ncol = 1,
  mwfact = 0.50,
  floatBars=false,
}


-- }}}

-- {{{ Menu
-- Create a laucher widget and a main menu
myawesomemenu = {
   { "manual", terminal .. " -e man awesome" },
   { "edit config", editor_cmd .. " " .. awful.util.getdir("config") .. "/rc.lua" },
   { "restart", awesome.restart },
   { "quit", awesome.quit }
}

mymainmenu = awful.menu({ items = { { "awesome", myawesomemenu, beautiful.awesome_icon },
                                    { "Debian", debian.menu.Debian_menu.Debian },
                                    { "open terminal", terminal }
                                  }
                        })

mylauncher = awful.widget.launcher({ image = image(beautiful.awesome_icon),
                                     menu = mymainmenu })
-- }}}

-- {{{ Wibox
-- Create a textclock widget
mytextclock = awful.widget.textclock({ align = "right" })

-- Create a systray
mysystray = widget({ type = "systray" })

-- Create a wibox for each screen and add it
mywibox = {}
mytaskbar = {}
mypromptbox = {}
mylayoutbox = {}
mytaglist = {}
mytaglist.buttons = awful.util.table.join(
                    awful.button({ }, 1, awful.tag.viewonly),
                    awful.button({ modkey }, 1, awful.client.movetotag),
                    awful.button({ }, 3, awful.tag.viewtoggle),
                    awful.button({ modkey }, 3, awful.client.toggletag),
                    awful.button({ }, 4, awful.tag.viewnext),
                    awful.button({ }, 5, awful.tag.viewprev)
                    )
mytasklist = {}
mytasklist.buttons = awful.util.table.join(
                     awful.button({ }, 1, function (c)
                                              if not c:isvisible() then
                                                  awful.tag.viewonly(c:tags()[1])
                                              end
                                              client.focus = c
                                              c:raise()
                                          end),
                     awful.button({ }, 3, function ()
                                              if instance then
                                                  instance:hide()
                                                  instance = nil
                                              else
                                                  instance = awful.menu.clients({ width=250 })
                                              end
                                          end),
                     awful.button({ }, 4, function ()
                                              awful.client.focus.byidx(1)
                                              if client.focus then client.focus:raise() end
                                          end),
                     awful.button({ }, 5, function ()
                                              awful.client.focus.byidx(-1)
                                              if client.focus then client.focus:raise() end
                                          end))

for s = 1, screen.count() do
    -- Create a promptbox for each screen
    mypromptbox[s] = awful.widget.prompt({ layout = awful.widget.layout.horizontal.leftright })
    -- Create an imagebox widget which will contains an icon indicating which layout we're using.
    -- We need one layoutbox per screen.
    mylayoutbox[s] = awful.widget.layoutbox(s)
    mylayoutbox[s]:buttons(awful.util.table.join(
                           awful.button({ }, 1, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 3, function () awful.layout.inc(layouts, -1) end),
                           awful.button({ }, 4, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 5, function () awful.layout.inc(layouts, -1) end)))
    -- Create a taglist widget
    mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.label.all, mytaglist.buttons)

    -- Create a tasklist widget
    mytasklist[s] = awful.widget.tasklist(function(c)
                                              return awful.widget.tasklist.label.currenttags(c, s)
                                          end, mytasklist.buttons)

-- Icones

myspacer         = widget({ type = "textbox", name = "myspacer" })
myseparator      = widget({ type = "textbox", name = "myseparator" })

myspacer.text    = " "
myseparator.text = "|"

mytimeicon       = widget({ type = "imagebox", name = "mytimeicon" })
mytimeicon.image = image(beautiful.widget_date)



    -- Create the wibox

    mywibox[s] = awful.wibox({ position = "top", screen = s })
    mywibox[s].widgets =
    { 
	    { mylauncher, mytaglist[s], mypromptbox[s], layout = awful.widget.layout.horizontal.leftright} ,
	    {
		    mytextbox,
		    mylayoutbox[s],
		    myseparator,
		    mytextclock, mytimeicon,
		    myseparator,
		    s == 1 and mysystray or nil,
		    layout = awful.widget.layout.horizontal.rightleft
	    },
	layout = awful.widget.layout.horizontal.leftright
    }
    mytaskbar[s] = awful.wibox({position = "bottom", screen = s})
    mytaskbar[s].widgets = { mytasklist[s], layout = awful.widget.layout.horizontal.rightleft}
    mywibox[s].screen = s
    mytaskbar[s].screen = s
end
-- }}}

-- {{{ Mouse bindings
root.buttons(awful.util.table.join(
    awful.button({ }, 3, function () mymainmenu:toggle() end),
    awful.button({ }, 4, awful.tag.viewnext),
    awful.button({ }, 5, awful.tag.viewprev)
))
-- }}}

-- {{{ Key bindings
globalkeys = awful.util.table.join(
    awful.key({ modkey,           }, "Left",   awful.tag.viewprev       ),
    awful.key({ modkey,           }, "Right",  awful.tag.viewnext       ),
    awful.key({ modkey, "Shift"         }, "Escape", awful.tag.history.restore),

    awful.key({ modkey,           }, "j",
        function ()
            awful.client.focus.byidx( 1)
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey,           }, "k",
        function ()
            awful.client.focus.byidx(-1)
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey,           }, "w", function () mymainmenu:show(true)        end),


  -- Layout manipulationi
--    awful
    awful.key({ modkey,           }, "Tab", function () awful.client.focus.byidx( 1)    end),
    awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(  1)    end),
    awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx( -1)    end),
    awful.key({ modkey, "Control" }, "j", function () awful.screen.focus_relative( 1) end),
    awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end),
    awful.key({ modkey,           }, "u", awful.client.urgent.jumpto),
    awful.key({ modkey, "Shift"	  }, "Tab",
        function ()
            awful.client.focus.history.previous()
            if client.focus then
                client.focus:raise()
            end
        end),
-- Shifty
    
    awful.key({ modkey, }, "t",             shifty.add),
    awful.key({ modkey, "Shift"   }, "d",           shifty.del),
    awful.key({ modkey, "Shift"   }, "r",           shifty.rename),

    awful.key({ modkey, "Shift"   }, "Left",   shifty.shift_prev        ),
    awful.key({ modkey, "Shift"   }, "Right",  shifty.shift_next        ),
 --   awful.key({ modkey            }, "Escape", function() awful.tag.history.restore() end), -- move to prev tag by history
    awful.key({ modkey, "Shift"   }, "n", shifty.send_prev), -- move client to prev tag
    awful.key({ modkey            }, "n", shifty.send_next), 

--    shifty.config.clientkeys = clientkeys
    -- Standard program
    awful.key({ modkey,           }, "Return", function () awful.util.spawn(terminal) end),
    awful.key({ modkey,           }, "r", function () awful.util.spawn("gmrun") end),
--    awful.key({ modkey, "Control" }, "r", awesome.restart),
--    awful.key({ modkey, "Shift"   }, "q", awesome.quit),
    awful.key({ modkey            },"x",      function () teardrop("urxvtc", "top") end),
    awful.key({ modkey,           }, "l",     function () awful.tag.incmwfact( 0.05)    end),
    awful.key({ modkey,           }, "h",     function () awful.tag.incmwfact(-0.05)    end),
    awful.key({ modkey, "Shift"   }, "h",     function () awful.tag.incnmaster( 1)      end),
    awful.key({ modkey, "Shift"   }, "l",     function () awful.tag.incnmaster(-1)      end),
    awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol( 1)         end),
    awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1)         end),
    awful.key({ modkey,           }, "space", function () awful.layout.inc(layouts,  1) end),
    awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(layouts, -1) end),
    -- Prompt
    awful.key({ modkey },            "BackSpace",     function () mypromptbox[mouse.screen]:run() end)


)
clientkeys = awful.util.table.join(
    awful.key({ modkey,           }, "s",      function (c) c.ontop  = not c.ontop  end        ),
    awful.key({ modkey,           }, "s",      function (c) c.sticky = not c.sticky end        ),
    awful.key({ modkey,           }, "f",      function (c) c.fullscreen = not c.fullscreen  end),
    awful.key({ modkey           }, "c",      function (c) c:kill()                         end),
    awful.key({ modkey, "Control" }, "space",  awful.client.floating.toggle                     ),
    awful.key({ modkey, "Control" }, "Return", function (c) c:swap(awful.client.getmaster()) end),
--    awful.key({ modkey,           }, "o",      awful.client.movetoscreen                        ),
--    awful.key({ modkey, "Shift"   }, "r",      function (c) c:redraw()                       end),
  --  awful.key({ modkey,           }, "n",      function (c) c.minimized = not c.minimized    end),
    awful.key({ modkey,           }, "m",
        function (c)
            c.maximized_horizontal = not c.maximized_horizontal
            c.maximized_vertical   = not c.maximized_vertical
        end)
)

-- Compute the maximum number of digit we need, limited to 9
--keynumber = 0
--for s = 1, screen.count() do
--	keynumber = math.min(9, math.max(#tags[s], keynumber));
--end

-- Bind all key numbers to tags.
-- Be careful: we use keycodes to make it works on any keyboard layout.
-- This should map on the top row of your keyboard, usually 1 to 9.

clientbuttons = awful.util.table.join(
    awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
    awful.button({ modkey }, 1, awful.mouse.client.move),
    awful.button({ modkey }, 3, awful.mouse.client.resize))

-- Key loop

for i=1, ( shifty.config.maxtags or 9 ) do
  table.foreach(awful.key({ modkey, }, i, function () local t = awful.tag.viewonly(shifty.getpos(i)) end), function(_, k) table.insert(globalkeys, k) end)
  table.foreach(awful.key({ modkey, "Control" }, i, function () local t = shifty.getpos(i); t.selected = not t.selected end), function(_, k) table.insert(globalkeys, k) end)
  table.foreach(awful.key({ modkey, "Control", "Shift" }, i, function () if client.focus then awful.client.toggletag(shifty.getpos(i)) end end), function(_, k) table.insert(globalkeys, k) end)
  -- move clients to other tags
  table.foreach(awful.key({ modkey, "Shift" }, i,
    function ()
      if client.focus then
        local c = client.focus
        slave = not ( client.focus == awful.client.getmaster(mouse.screen))
        t = shifty.getpos(i)
        awful.client.movetotag(t)
        awful.tag.viewonly(t)
        if slave then awful.client.setslave(c) end
      end
    end), function(_, k) table.insert(globalkeys, k) end)
end



-- Set keys
root.keys(globalkeys)
shifty.config.globalkeys = globalkeys
shifty.config.clientkeys = clientkeys

-- }}}


-- {{{ Signals
-- Signal function to execute when a new client appears.
client.add_signal("manage", function (c, startup)
    -- Add a titlebar
    -- awful.titlebar.add(c, { modkey = modkey })

    -- Enable sloppy focus
    c:add_signal("mouse::enter", function(c)
        if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
            and awful.client.focus.filter(c) then
            client.focus = c
        end
    end)

    if not startup then
        -- Set the windows at the slave,
        -- i.e. put it at the end of others instead of setting it master.
        -- awful.client.setslave(c)

        -- Put windows in a smart way, only if they does not set an initial position.
        if not c.size_hints.user_position and not c.size_hints.program_position then
            awful.placement.no_overlap(c)
            awful.placement.no_offscreen(c)
        end
    end
end)
shifty.init()
client.add_signal("focus", function(c) c.border_color = beautiful.border_focus end)
client.add_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
-- }}}

-- }}}
client.add_signal("focus", function(c)
  c.border_color = beautiful.border_focus
  if c.opacity < 1.0 then
    c.opacity = beautiful.opacity_focus
  end
end)

client.add_signal("unfocus", function(c)
  c.border_color = beautiful.border_normal
  if c.opacity < 1.0 then
    c.opacity = beautiful.opacity_normal
  end
end)

